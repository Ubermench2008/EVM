-O0: Выделяет 80 байт на стеке.
sub     sp, sp, #80
-O1: Выделяет 36 байт на стеке.
sub     sp, sp, #36
~ Уровень оптимизации -O1 уменьшает количество выделяемой памяти на стеке, что экономит ресурсы и повышает производительность.


-O0: Сохраняет регистры {r4, r5, r7, lr} и один вещественный регистр {d8}.
push    {r4, r5, r7, lr}
vpush.64        {d8}
-O1: Сохраняет дополнительные регистры {r4, r5, r6, r7, lr} и больше вещественных регистров {d8, d9, d10, d11, d12}.
push    {r4, r5, r6, r7, lr}
vpush.64        {d8, d9, d10, d11, d12}
~ При оптимизации -O1 компилятор использует больше регистров для хранения временных значений, что снижает количество обращений к памяти и ускоряет выполнение программы.


-O0: Инициализация переменных типа double выполняется с помощью отдельных инструкций для загрузки и сохранения значений в память.
mov     r2, #0
mov     r3, #0
movt    r3, 16352
strd    r2, [r7, #32]
-O1: Инициализация переменных типа double осуществляется непосредственно в регистры, используя команды vmov.f64, избегая обращений к памяти.
vmov.f64        d9, #5.0e-1
vmov.f64        d8, #1.0e+0
~ Оптимизация -O1 предпочитает использование регистров для хранения переменных, что уменьшает количество операций чтения/записи в память и повышает эффективность кода.


-O0: Использует ограниченное количество вещественных регистров (d8), что приводит к частым загрузкам и сохранениям из памяти.
vpush.64        {d8}
-O1: Расширяет использование вещественных регистров (d8-d12), позволяя хранить больше временных значений непосредственно в регистрах.
vpush.64        {d8, d9, d10, d11, d12}
~ Это снижает количество операций доступа к памяти и ускоряет выполнение вещественных вычислений.


Загрузка и хранение констант:
-O0: Константы загружаются из памяти каждый раз при необходимости.
.L5:
        .word   -400107883
        .word   1041313291
vldr.64 d5, .L5
-O1: Константы могут быть загружены один раз и использоваться многократно, что уменьшает количество обращений к памяти.
vldr.64 d5, .L7+8