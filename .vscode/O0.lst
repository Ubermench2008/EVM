.LC0:
        .ascii  "%lld\000"
.LC1:
        .ascii  "%lf %lf\000"
main:
        {
        push    {r4, r5, r7, lr}
        vpush.64        {d8} | Сохранение вещественного регистра d8 на стек
        sub     sp, sp, #80
        add     r7, sp, #8 | Установка r7 как базового указателя для локальных переменных

        scanf("%lld", &N); 
        add     r3, r7, #16 | Вычисление адреса переменной `N` (r7 + 16)
        mov     r1, r3 | Передача адреса `N` в r1 (аргумент для scanf)
        movw    r0, #:lower16:.LC0 | Загрузка нижних 16 бит адреса строки формата scanf
        movt    r0, #:upper16:.LC0 | Загрузка верхних 16 бит адреса строки формата scanf
        bl      __isoc99_scanf | Вызов функции scanf("%lld", &N)

        double x = 0.5: 
        mov     r2, #0 | r2 и r3 в ноль для последующего сохранения значений
        mov     r3, #0 |
        movt    r3, 16352 | верхние 16 бит (представление 0.5 в формате IEEE 754 double)
        strd    r2, [r7, #32]

        double s = 0.0:
        mov     r2, #0 |
        mov     r3, #0 | Обнуляют регистры r2 и r3.
        strd    r2, [r7, #64] | Сохраняет 0.0 в переменную s по адресу [r7 + 64]

        double sign = 1.0:
        mov     r2, #0
        mov     r3, #0
        movt    r3, 16368 | верхние 16 бит r3 для представления числа 1.0 в формате IEEE 754 double.
        strd    r2, [r7, #56] | Сохраняет 1.0 в переменную sign - [r7 + 56]

        double xn = x:
        ldrd    r2, [r7, #32] | Загружает значение x из [r7 + 32] в регистры r2 и r3
        strd    r2, [r7, #48] | Сохраняет значение x в переменную xn по адресу [r7 + 48]

        clock_gettime(CLOCK_MONOTONIC_RAW, &a);
        add     r3, r7, #8 | Вычисляет адрес структуры a по смещению 8 от r7
        mov     r1, r3 | Передаёт адрес a в регистр r1
        movs    r0, #4 | Загружает константу 4 (значение CLOCK_MONOTONIC_RAW)->r0 (первый аргумент для clock_gettime).
        bl      clock_gettime

        for(long long n = 1; n <= N; n++) (n)
        mov     r2, #1 |
        mov     r3, #0 |
        strd    r2, [r7, #40] | Сохраняет значение 1 в переменную n по адресу [r7 + 40]
        b       .L2
.L3:
        s += sign * xn / n;
        vldr.64 d6, [r7, #56] | sign в регистр d6
        vldr.64 d7, [r7, #48] | xn в регистр d7.
        vmul.f64        d8, d6, d7 | sign * xn -> d8.
        ldrd    r0, [r7, #40] | n из [r7 + 40] в регистры r0 и r1
        bl      __aeabi_l2d | целое n в double, Результат -> r0 и r1
        vmov    d6, r0, r1 | ->d6
        vdiv.f64        d7, d8, d6 | sign * xn / n -> d7
        vldr.64 d6, [r7, #64] | s текущее -> d6
        vadd.f64        d7, d6, d7 | s + (sign * xn / n) -> d7
        vstr.64 d7, [r7, #64] | обновлённое значение s -> [r7 + 64]

        sign *= -1.0; 
        vldr.64 d7, [r7, #56] | sign в регистр d7
        vneg.f64        d7, d7 |  Меняет знак числа в d7
        vstr.64 d7, [r7, #56] | Сохраняет изменённое значение sign по адресу [r7 + 56]

        xn *= x;
        vldr.64 d6, [r7, #48] | Загружает текущее значение xn в d6
        vldr.64 d7, [r7, #32] | Загружает значение x в d7.
        vmul.f64        d7, d6, d7 | xn * x, результат в d7.
        vstr.64 d7, [r7, #48] | Сохраняет обновлённое значение xn по адресу [r7 + 48]

        n++
        ldrd    r2, [r7, #40] | Загружает текущее значение n из [r7 + 40] в r2 и r3
        adds    r4, r2, #1 | +1 к младшей части n
        adc     r5, r3, #0 | 0 к старшей части (учитывает перенос)
        strd    r4, [r7, #40] | обновленное n по адресу [r7 + 40]
.L2:
        n <= N
        ldrd    r0, [r7, #16] | Загружает значение N из [r7 + 16] в r0 и r1
        ldrd    r2, [r7, #40] | Загружает значение n из [r7 + 40] в r2 и r3.
        cmp     r0, r2 | Сравнивает младшие 32 бита N (r0) и n (r2).
        sbcs    r3, r1, r3 | Сравнивает старшие 32 бита N (r1) и n (r3) с учётом переноса.
        bge     .L3 | Если n <= N, переходит к метке .L3

        clock_gettime(CLOCK_MONOTONIC_RAW, &b);
        mov     r3, r7 | r3 как указатель на текущий frame pointer
        mov     r1, r3 | Передаёт адрес структуры b
        movs    r0, #4 | CLOCK_MONOTONIC_RAW
        bl      clock_gettime

        double ts = (double)(b.tv_sec - a.tv_sec) + 1e-9 * (double)(b.tv_nsec - a.tv_nsec);
        ldr     r2, [r7] | a.tv_sec из [r7] в r2
        ldr     r3, [r7, #8] | b.tv_sec из [r7 + 8] в r3.
        subs    r3, r2, r3 | a.tv_sec - b.tv_sec, результат в r3
        vmov    s15, r3 @ int | Перемещает результат в SIMD регистр s15 как целое число
        vcvt.f64.s32    d6, s15 | s15 в double, результат в d6.
        ldr     r2, [r7, #4] | a.tv_nsec из [r7 + 4] в r2
        ldr     r3, [r7, #12] | b.tv_nsec из [r7 + 12] в r3
        subs    r3, r2, r3 | a.tv_nsec - b.tv_nsec -> r3
        vmov    s15, r3 @ int | Перемещает результат в s15 как целое число.
        vcvt.f64.s32    d7, s15 | s15 в double, результат в d7
        vldr.64 d5, .L5 | Загружает константу 1e-9 в d5
        vmul.f64        d7, d7, d5 | (a.tv_nsec - b.tv_nsec) * 1e-9, результат в d7.
        vadd.f64        d7, d6, d7 | (a.tv_sec - b.tv_sec) * 1e-9 * (a.tv_nsec - b.tv_nsec), результат в d7.
        vstr.64 d7, [r7, #24] | ts -> [r7 + 24]

        printf("%lf %lf", ts, s);
        ldrd    r2, [r7, #64] | s из [r7 + 64] -> r2 и r3
        strd    r2, [sp] | Сохраняет значение s на вершине стека.
        ldrd    r2, [r7, #24] | Загружает значение ts из [r7 + 24] в r2 и r3
        movw    r0, #:lower16:.LC1 | "%lf %lf" в r0.
        movt    r0, #:upper16:.LC1 |
        bl      printf

        return 0;   
        movs    r3, #0 | Устанавливает r3 в 0 (значение возврата)

        }
        mov     r0, r3 |  Перемещает значение возврата (0) в r0.
        adds    r7, r7, #72 | Восстанавливает указатель кадра
        mov     sp, r7 | Восстанавливает указатель стека из r7
        vldm    sp!, {d8} | Восстанавливает вещественный регистр d8 из стека и увеличивает указатель стека.
        pop     {r4, r5, r7, pc}
.L5:
        .word   -400107883  | Нижняя часть константы 1e-9
        .word   1041313291  | Верхняя часть константы 1e-9